(in-package :cl-ipopt)

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.7
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant TRUE 1)

(cl:defconstant FALSE 0)

(cffi:defcfun ("CreateIpoptProblem" CreateIpoptProblem) :pointer
  (n :int)
  (x_L :pointer)
  (x_U :pointer)
  (m :int)
  (g_L :pointer)
  (g_U :pointer)
  (nele_jac :int)
  (nele_hess :int)
  (index_style :int)
  (eval_f :pointer)
  (eval_g :pointer)
  (eval_grad_f :pointer)
  (eval_jac_g :pointer)
  (eval_h :pointer))

(cffi:defcfun ("FreeIpoptProblem" FreeIpoptProblem) :void
  (ipopt_problem :pointer))

(cffi:defcfun ("AddIpoptStrOption" AddIpoptStrOption) :int
  (ipopt_problem :pointer)
  (keyword :string)
  (val :string))

(cffi:defcfun ("AddIpoptNumOption" AddIpoptNumOption) :int
  (ipopt_problem :pointer)
  (keyword :string)
  (val :double))

(cffi:defcfun ("AddIpoptIntOption" AddIpoptIntOption) :int
  (ipopt_problem :pointer)
  (keyword :string)
  (val :int))

(cffi:defcfun ("OpenIpoptOutputFile" OpenIpoptOutputFile) :int
  (ipopt_problem :pointer)
  (file_name :string)
  (print_level :int))

(cffi:defcfun ("SetIpoptProblemScaling" SetIpoptProblemScaling) :int
  (ipopt_problem :pointer)
  (obj_scaling :double)
  (x_scaling :pointer)
  (g_scaling :pointer))

(cffi:defcfun ("SetIntermediateCallback" SetIntermediateCallback) :int
  (ipopt_problem :pointer)
  (intermediate_cb :pointer))

(cffi:defcfun ("IpoptSolve" IpoptSolve) :pointer
  (ipopt_problem :pointer)
  (x :pointer)
  (g :pointer)
  (obj_val :pointer)
  (mult_g :pointer)
  (mult_x_L :pointer)
  (mult_x_U :pointer)
  (user_data :pointer))


